package parse;

import error.ErrorHelper;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import io.vavr.collection.List;
import absyn.*;

parser code {:
  public Parser(Lexer lex) {
     this(lex, lex.getSymbolFactory());
  }

  private Loc loc(Location left, Location right) {
     return Loc.loc(left, right);
  }

  /* override error routines */
  private Loc locOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               Loc.loc((ComplexSymbol) info) :
               info instanceof Symbol ?
                  Loc.loc((Symbol) info) :
                  Loc.loc(cur_token);
  }
  private String lexemeOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               " at '" + ((ComplexSymbol) info).getName() + "'" :
               "";

  }
  public void report_fatal_error(String message, Object info) {
     done_parsing();
     throw ErrorHelper.error(locOfInfo(info), "%s%s%nCan't recover from previous error(s), giving up.", message, lexemeOfInfo(info));
  }
  public void report_error(String message, Object info) {
     throw ErrorHelper.error(locOfInfo(info), "%s%s", message, lexemeOfInfo(info));
  }
:};


terminal String LITBOOL;
terminal String LITINT;
terminal String LITSTRING;
terminal String ID;
terminal        ASSIGN;
terminal        PLUS, MINUS, TIMES, DIV, MOD, UMINUS;
terminal        EQ, NE, LT, LE, GT, GE;
terminal        AND, OR;
terminal        LPAREN, RPAREN, COMMA;
terminal        BOOL, INT, STRING;
terminal        IF, THEN, ELSE;
terminal        WHILE, DO;
terminal        LET, IN;

non terminal Exp program;
non terminal Exp exp;
non terminal List<Exp> exps, expsRest;

precedence right THEN, ELSE, DO, IN;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NE, GT, GE, LT, LE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence nonassoc UMINUS;
precedence left LPAREN, RPAREN;

start with program;

program ::=
  exp:x                             {: RESULT = x; :}
;

exp ::=
  LITBOOL:x                         {: RESULT = new ExpBool(loc(xxleft,xxright), new Boolean(x)); :}
| LITINT:x                          {: RESULT = new ExpInt(loc(xxleft,xxright), new Integer(x)); :}
| LITSTRING:x                       {: RESULT = new ExpString(loc(xxleft, xxright), new String(x)); :}
| ID:x                              {: RESULT = new ExpId(loc(xxleft, xxright), new String(x)); :}
| ID:x ASSIGN exp:y                 {: RESULT = new ExpAssign(loc(xxleft, yxright), new String(x), y); :}
| exp:x PLUS exp:y                  {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.PLUS, x, y); :}
| exp:x MINUS exp:y                 {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.MINUS, x, y); :}
| exp:x TIMES exp:y                 {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.TIMES, x, y); :}
| exp:x DIV exp:y                   {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.DIV, x, y); :}
| exp:x MOD exp:y                   {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.MOD, x, y); :}
| UMINUS exp:x                      {: RESULT = new ExpUn(loc(xxleft, xxright), x); :}
| exp:x EQ exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.EQ, x, y); :}
| exp:x NE exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.NE, x, y); :}
| exp:x GT exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.GT, x, y); :}
| exp:x GE exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.GE, x, y); :}
| exp:x LT exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.LT, x, y); :}
| exp:x LE exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.LE, x, y); :}
| exp:x AND exp:y                   {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.AND, x, y); :}
| exp:x OR exp:y                    {: RESULT = new ExpBin(loc(xxleft, yxright), ExpBin.Operator.OR, x, y); :}
| LPAREN:l exps:s RPAREN:r          {: RESULT = new ExpSeq(loc(lxleft, rxright), s); :}
| IF exp:x THEN exp:t ELSE exp:f    {: RESULT = new ExpIf(loc(xxleft,fxright), x, t, f); :}
| WHILE exp:x DO exp:y              {: RESULT = new ExpWhile(loc(xxleft, yxright), x, y); :}
| LET:l ID:v EQ exp:i IN exp:b      {: RESULT = new ExpLet(loc(lxleft, bxright), v, i, b); :}
| ID:f LPAREN exps:a RPAREN:r       {: RESULT = new ExpCall(loc(fxleft, rxright), f, a); :}
;

exps ::=
  /* empty */                       {: RESULT = List.empty(); :}
| exp:x expsRest:xs                 {: RESULT = xs.prepend(x); :}
;

expsRest ::=
  /* empty */                       {: RESULT = List.empty(); :}
| COMMA exp:x expsRest:xs           {: RESULT = xs.prepend(x); :}
;

//typeId ::=
// BOOL:x ID:y {::}
//| INT:x ID:y      {::}
//| STRING:x ID:y   {::}
//;

//typeIdsRest ::=
//  /* empty */                       {: RESULT = List.empty(); :}
//| COMMA typeid:x typeidrest:xs      {: RESULT = xs.prepend(x); :}
//;
//
//typeIds ::=
//  /* empty */                       {: RESULT = List.empty(); :}
//  typeId:x typeIdsRest:y            {::}
//;
